<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Iterations]]></title>
  <subtitle><![CDATA[Figuring it out... One step at a time.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://ericmbarnard.com/"/>
  <updated>2015-04-26T13:26:56.737Z</updated>
  <id>http://ericmbarnard.com/</id>
  
  <author>
    <name><![CDATA[Eric M Barnard]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Leaving, Learning and Teaching]]></title>
    <link href="http://ericmbarnard.com/2015/04/leaving-learning-teaching.html"/>
    <id>http://ericmbarnard.com/2015/04/leaving-learning-teaching.html</id>
    <published>2015-04-10T12:00:00.000Z</published>
    <updated>2015-04-26T13:26:56.737Z</updated>
    <content type="html"><![CDATA[<p>Today is my last day at Codagami. It’s been almost exactly 3 years since I started, and I can’t say enough about how much I’ve learned and grown over those three years. I’m moving on for a multitude of reasons - some bigger than others and some smaller - nothing bad. Most importantly, though, I’m moving on to continue growing and challenging myself in new directions.</p>
<h2 id="The_Details">The Details</h2><p>First, I’m leaving because eventually I’ll be starting a new position with our local community college, <a href="http://www.parkland.edu/" target="_blank" rel="external">Parkland College</a> as an instructor in their Computer Science and Information Technology department. I’m taking this position because I’ve always loved the teaching experiences I’ve had with any role I’ve been in and I’ve wanted to get closer to that area with my career moves than further. I’ll start by teaching a summer course or two and then begin full-time teaching in the fall.</p>
<p>As part of the new role I’ll be taking with Parkland, I am being given the opportunity to help coordinate some major updates to their software development curriculum and programs. I realize this will be a lot of work, but at the end of the day I am pretty stoked about the idea that I’ll be able to apply my industry experience into the degree programs we’ll be offering. The challenge of trying to build an ever-evolving curriculum that keeps up with an industry that changes as quickly as ours is definitely not going to be easy - but as I’ve gotten older I’ve realized those are the types of challenges that make me want to get up in the morning.</p>
<p>So, you might be wondering… what on earth am I going to be doing between now and the fall (and the future summers for that matter)? Well - I’ll be working for myself.  This actually supplements my new role quite well, as staying in-tune with the industry from both a technical and relationship level will continue to give me that <em>“real-world”</em> experience I’ll need as I work with students and develop curriculum.</p>
<p>I’m actively looking for and taking on small projects here and there to keep myself busy and stay as knee-deep in the software development industry as I can. I’ve got some work lined up currently and will continue to try to seek out cool projects that I can learn from (if you have any - please feel free to reach out). I will be setting up a business entity and doing all that sorts of stuff over the next few weeks - so stay tuned.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Today is my last day at Codagami. It’s been almost exactly 3 years since I started, and I can’t say enough about how much I’ve learned an]]>
    </summary>
    
      <category term="Life" scheme="http://ericmbarnard.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[My First Book is Out]]></title>
    <link href="http://ericmbarnard.com/2013/01/my-first-book-is-out.html"/>
    <id>http://ericmbarnard.com/2013/01/my-first-book-is-out.html</id>
    <published>2013-01-06T21:20:00.000Z</published>
    <updated>2015-04-26T13:20:44.396Z</updated>
    <content type="html"><![CDATA[<img src="/images/my_first_book_is_out.jpg">
<p>I’m pretty excited to announce that my first book, <a href="http://www.packtpub.com/knockoutjs-starter/book" target="_blank" rel="external">KnockoutJS Starter</a>, was recently published. If my blog looked dead for the past several months, it was due to this little project (and a few other things).</p>
<p>Please check it out and leave any feedback/comments here. I would like to write another JavaScript book and constructive feedback would be really appreciated!</p>
<p><a href="http://www.packtpub.com/knockoutjs-starter/book" target="_blank" rel="external">KnockoutJS Starter</a> - Publisher Site<br><a href="http://www.amazon.com/KnockoutJS-Starter-ebook/dp/B00AC1HDJS/" target="_blank" rel="external">KnockoutJS Starter</a> - Amazon</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/my_first_book_is_out.jpg">
<p>I’m pretty excited to announce that my first book, <a href="http://www.packtpub.com/knockout]]>
    </summary>
    
      <category term="JavaScript" scheme="http://ericmbarnard.com/tags/javascript/"/>
    
      <category term="KnockoutJS" scheme="http://ericmbarnard.com/tags/knockoutjs/"/>
    
      <category term="Development" scheme="http://ericmbarnard.com/categories/development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Debugging Elmah on Azure]]></title>
    <link href="http://ericmbarnard.com/2012/07/debugging-elmah-on-azure.html"/>
    <id>http://ericmbarnard.com/2012/07/debugging-elmah-on-azure.html</id>
    <published>2012-07-31T12:00:00.000Z</published>
    <updated>2015-04-25T22:13:43.657Z</updated>
    <content type="html"><![CDATA[<p>Recently I was deploying an application to the new Azure Websites service, and I noticed a slight problem with my app.</p>
<p>ELMAH worked on my machine, but not in the cloud.</p>
<p>Needless to say, if your exception logging isn’t working, then you’re probably not going to sleep well at night. So my first question, naturally, was “How in the world do I see what is going on inside ELMAH?”.</p>
<p>One thing that many folks don’t realize until they need to do something like this is that logging libraries tend to “eat” many of their internal exceptions since they are usually the layer that is added to take care of exactly that. I say they “eat” their exceptions not in a strict sense, but more so because there really is no where you can do a “TRY CATCH” to see what is happening.</p>
<h2 id="Tracing_to_the_Rescue">Tracing to the Rescue</h2><p>Instead of throwing exceptions both ELMAH and Log4net output their exceptions to the System.Diagnostics.Trace object. This is sweet when debugging locally, as any application traces will automatically write to the Output window in Visual Studio. But as the title of this post reads, that doesn’t help me at all.</p>
<p>I needed to figure out how to output the traces of my app running in Azure to some storage that I could then view. I did have Log4net working, and it was writing to an SQL Azure database, so I decided to go with that option.</p>
<p>First, I had to learn a few things about ASP.NET and Tracing. ASP.NET has its own tracing mechanism that is somewhat separate from the Diagnostics Tracing (which you can read about here). I could try to write the Diagnostic Trace messages out to the ASP.NET Page Trace mechanism, but in MVC (which I’m using), it doesn’t really work. So, honestly my best bet is to write to a database (as writing to a file in the cloud is not very reliable) using a TraceListener class setup to redirect Trace messages to Log4net’s log.</p>
<p>My TraceListener looked like this:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Diagnostics</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Log4netTraceListener</span> : <span class="title">TraceListener</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> log4net.ILog _log;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Log4netTraceListener</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        _log = log4net.LogManager.GetLogger(<span class="keyword">typeof</span>(Log4netTraceListener));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">string</span> message)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (_log != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _log.Debug(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteLine</span><span class="params">(<span class="keyword">string</span> message)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (_log != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _log.Debug(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now, I first tried adding my Log4netTraceListener in the web.config. However, this Listener is initialized and added to the “Trace.Listeners” collection before Log4net has initialized in my web application. So instead, I have to add it programmatically during the application startup. I did the following in my Global.asax.cs:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">System.Diagnostics.Trace.Listeners.Add(<span class="keyword">new</span> Log4netTraceListener());</span><br></pre></td></tr></table></figure>
<p>After all of that, I finally started seeing the following in my Log4net log:</p>
<blockquote>
<p>System.Data.SqlClient.SqlException (0x80131904): Tables without a clustered index are not supported in this version of SQL Server. Please create a clustered index and try again.</p>
</blockquote>
<p>Whoa, that is not something I expected to see. Apparently the “ELMAH_Error” table has a non-clustered primary key and no clustered index on the table (not really sure why). So we have two options:</p>
<ol>
<li>Add another column to the table and setup a clustered index on that column.</li>
<li>The “Sequence” column is already an “int IDENTITY(1,1)” column - so just setup a clustered index on that column.</li>
</ol>
<p>I chose option 2. And here’s the change to apply after executing the default <a href="https://code.google.com/p/elmah/source/browse/src/Elmah/SQLServer.sql" target="_blank" rel="external">ELMAH SQL Script</a>:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> CLUSTERED <span class="keyword">INDEX</span> [IC_Elmah_Sequence] <span class="keyword">on</span> dbo.[ELMAH_Error] (Sequence)</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>Recently I was deploying an application to the new Azure Websites service, and I noticed a slight problem with my app.</p>
<p>ELMAH worke]]>
    </summary>
    
      <category term="Azure" scheme="http://ericmbarnard.com/tags/azure/"/>
    
      <category term="SQL" scheme="http://ericmbarnard.com/tags/sql/"/>
    
      <category term="Development" scheme="http://ericmbarnard.com/categories/development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Getting Started with LocalDB]]></title>
    <link href="http://ericmbarnard.com/2012/07/getting-started-with-localdb.html"/>
    <id>http://ericmbarnard.com/2012/07/getting-started-with-localdb.html</id>
    <published>2012-07-04T22:12:06.000Z</published>
    <updated>2015-04-26T14:11:57.688Z</updated>
    <content type="html"><![CDATA[<p>With the launch of SQL Server 2012, a new product called “LocalDB” was launched. This new toy is a great fit for needs that fall somewhere in the space between SQL Express and SQL Compact.</p>
<p>While you can read the full list of features for LocalDB, I’ll highlight a few below:</p>
<ul>
<li>Easy, and simple MSI to install. I’ve had very little problems with this, and it is light-years better than trying to setup SQL Express</li>
<li>Ability to control user access to the database</li>
<li>Supports virtually all features of SQL Express (Stored Procedures, Triggers, … even some basic Replication)</li>
<li>Not an extra service on your machine to manage</li>
</ul>
<p>Initially, there was some confusion as to whether LocalDB was high-powered file-based database or just a dumbed-down version of SQL Express. I’m not going to debate the semantics of what it is exactly, but I will tell you that you get your standard “.mdf” and “.ldf” files with LocalDB. However, the MSI installs some central libraries and an engine that power the LocalDB instances. The engine does have to have some knowledge as to the existence of any instances of LocalDB in order for those to work. So if you were looking for something where you can just drop a file into a directory and it will just work… not quite, but close.</p>
<h2 id="Instances">Instances</h2><p>LocalDB has the notion of “Automatic” and “Named” instances. Per version of LocalDB installed on your machine, there is only one “Automatic” instance per user. You can think of this as the default “SQLEXPRESS” instance that is installed when you first download and install SQL Express on a machine, only it is unique per user on the machine. So if you create an application that creates and uses the “Automatic” instance of LocalDB and this application is installed on a machine with 3 different user accounts, you will have 3 different “.mdf” and “.ldf” files after each user logs in and uses the application the first time.  This “Automatic” instance is:</p>
<ul>
<li>“Public” – meaning any application process under the user’s account can access the instance when logged into a machine</li>
<li>Accessed via the connection string “(localdb){major version}” – which for right now means you’ll use “(localdb)\v11.0”</li>
</ul>
<img src="/images/getting-started-with-local-db-01.png">
<ul>
<li>Great for development purposes when you need to just throw together a DB and ship something</li>
</ul>
<h2 id="Named_Instances">Named Instances</h2><p>The “Named” instance of LocalDB refers to private instances of a database that you can setup. These are useful if you want an application to have a separate, private database per user on a machine (a “Named” instance will run in a separate process under the current user on a machine).</p>
<h2 id="Sharing_Instances">Sharing Instances</h2><p>So what if you want to allow multiple users on a machine to have access to a single LocalDB database instance? Well you can also “share” a “Named” instance of LocalDB. You can control who the instance is shared with, and you can enable/disable sharing at any time.</p>
<p>When connecting with a shared instance, your connection string will need to include an extra “.\” in the server portion. Going with the example above, one would use: “(localdb).\MySharedInstance”. This tells the engine that this is a shared instance.</p>
<h2 id="SqlLocalDb_Utility">SqlLocalDb Utility</h2><p>When you install LocalDB on a machine, it also installs the SqlLocalDb command line utility. It’s pretty simple to use, and allows you to setup batch files to control the creation of your LocalDB’s. One of the first things I do is create a “SetupDb.cmd” file in my source code folder of an app I’m building. This allows other devs to easily replicate setting up a development database on their machine in the same way.</p>
<img src="/images/getting-started-with-local-db-02.png">
<h2 id="Where_Does_Everything_Go?">Where Does Everything Go?</h2><p>One of my first questions was, where are the actual database files?</p>
<blockquote>
<p>The default is: “C:\Users{USER}\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances”</p>
</blockquote>
<p>If I’ve created the “Northwind” Named instance as above, and I go to the default folder, I will see:</p>
<img src="/images/getting-started-with-local-db-03.png">
<p>Inside each of these folders are your typical “master.mdf” , “temp.mdf”, log files, etc… If you want to create your database’s “.mdf” and “.ldf” files in a separate directory, you can easily do that by specifying the location when running a T-SQL statement to “CREATE DATABASE …”. Specifying where your data lives is not really any different than what you’ve done with SQL Server in the past.</p>
<p>If you want to point your application to specific ‘.mdf” or “.ldf” files at runtime, you can specify that in your connection string using the “AttachDbFileName” attribute, you can also read more <a href="https://msdn.microsoft.com/en-us/library/hh309441.aspx" target="_blank" rel="external">here</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>With the launch of SQL Server 2012, a new product called “LocalDB” was launched. This new toy is a great fit for needs that fall somewher]]>
    </summary>
    
      <category term="SQL" scheme="http://ericmbarnard.com/tags/sql/"/>
    
      <category term="Development" scheme="http://ericmbarnard.com/categories/development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript Basics - Native Stuff]]></title>
    <link href="http://ericmbarnard.com/2011/11/javascript-basics-native-stuff.html"/>
    <id>http://ericmbarnard.com/2011/11/javascript-basics-native-stuff.html</id>
    <published>2011-11-01T13:29:23.000Z</published>
    <updated>2015-04-26T14:12:04.583Z</updated>
    <content type="html"><![CDATA[<p>For a while I’ve been wanting to write about some core things that I’ve learned while creating complex JavaScript applications. Not necessarily ‘begginer’ things, but I guess someone could use these as so.</p>
<p>I also build on the .NET platform. Think what you will, but I like it… and I’ve written Ruby (liked it too), and love JavaScript (a dynamic language at that) development.</p>
<p>First off JavaScript does have some core types that should be understood. My attempt to describe them below is for someone coming from a strongly typed world:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Boolean</code></td>
<td>true/false</td>
</tr>
<tr>
<td><code>String</code></td>
<td>character array</td>
</tr>
<tr>
<td><code>Number</code></td>
<td>float (can be used as integer, decimal, etc…)</td>
</tr>
<tr>
<td><code>null</code></td>
<td>null</td>
</tr>
<tr>
<td><code>undefined</code></td>
<td>basically non-existent, values can’t be initialized to <code>undefined</code></td>
</tr>
<tr>
<td><code>Object</code></td>
<td>essentially a dictionary/hash table of key values</td>
</tr>
<tr>
<td><code>Array</code></td>
<td>not really a true array, but an object with numerical keys, and native manipulation functions. Think more ‘special object’ than ordered sets in memory</td>
</tr>
<tr>
<td><code>Function</code></td>
<td>objects that can be invoked, but still can exist as singular objects</td>
</tr>
</tbody>
</table>
<p>So lets address the first big question, what’s the difference between <code>null</code> and <code>undefined</code>? <code>null</code> and <code>undefined</code> are very similar, however <code>undefined</code> seems to be what most browsers use to indicate something hasn’t been declared or initialized. <code>null</code> is something that is used when you perhaps want to initialize an object or property, but don’t want it to have a value.</p>
<p>Ok, so how about this Array vs Object thing? First off, Arrays DO have the following properties/methods:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr.length; <span class="comment">// Number</span></span><br><span class="line">arr.push    <span class="comment">// Function</span></span><br><span class="line">arr.shift;  <span class="comment">// Function</span></span><br><span class="line">arr.unshift; <span class="comment">// Function</span></span><br><span class="line">arr.splice; <span class="comment">// Function</span></span><br><span class="line">arr.slice;  <span class="comment">// Function</span></span><br><span class="line">arr.pop;    <span class="comment">// Function</span></span><br><span class="line">arr.join;   <span class="comment">// Function</span></span><br><span class="line">arr.concat; <span class="comment">// Function</span></span><br></pre></td></tr></table></figure></p>
<p>I won’t get into those here, especially when you have <a href="http://www.w3schools.com/jsref/jsref_obj_array.asp" target="_blank" rel="external">this</a></p>
<p>However, depending on the browser that you are using, these are not usually the super-efficient data structures that we’re used to. They are still very useful, I just want you to be informed.</p>
<p>Lastly, what is this <code>Function</code> thing?</p>
<p>Functions, like I mentioned, can be invoked and have parameters passed to them (they can do a lot more, but I can’t put it all in one post, right?) Essentially a <code>Function</code> is an object that you can create and execute logic inside. You can hang it off of a regular object and make a method (like we’re normally used to) or some other fancy things we’ll get to.</p>
<p>Here’s a decent example of building out a basic object:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> car = &#123;&#125;; <span class="comment">//a new object</span></span><br><span class="line">car.name = <span class="string">"Corvette"</span>; <span class="comment">//a string</span></span><br><span class="line">car.maxSpeed = <span class="number">155</span>; <span class="comment">//a number</span></span><br><span class="line">car.currentSpeed = <span class="literal">null</span>; <span class="comment">//initializing to null</span></span><br><span class="line">car.honk = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">//a function</span></span><br><span class="line">    alert(<span class="string">"Honk"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>A couple things you may have noticed so far… creating new objects and arrays.<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dont' do</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Don't do</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure></p>
<p>Use the shorthand and not the “new” keyword for native objects. Its pointless and is extra keysstrokes for your fingers.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>For a while I’ve been wanting to write about some core things that I’ve learned while creating complex JavaScript applications. Not neces]]>
    </summary>
    
      <category term="JavaScript" scheme="http://ericmbarnard.com/tags/javascript/"/>
    
      <category term="Development" scheme="http://ericmbarnard.com/categories/development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SQL Script Generation Column Names]]></title>
    <link href="http://ericmbarnard.com/2011/08/sql-script-generation-column-names.html"/>
    <id>http://ericmbarnard.com/2011/08/sql-script-generation-column-names.html</id>
    <published>2011-08-08T17:00:00.000Z</published>
    <updated>2015-04-25T22:13:33.421Z</updated>
    <content type="html"><![CDATA[<p>When I’m doing heavy database development, one of the biggest annoyances I run into is having to hand key (or clumsily generate) the column names for stored procedures (especially those containing MERGE statements). I really wished I could use something to quickly output the columns to text so I could copy and paste the formatted column names as I needed them… well voila.</p>
<p>Our head DBA always has a few tricks up his sleeve, so we setup a system stored procedure to print out the column names (comma separated of course) for what ever table we want.</p>
<p>The PROC allows you to specify:</p>
<ul>
<li>Table Name (as it appears in the SYS.tables table)</li>
<li>‘L’ or ‘W’ depending if you want the columns listed with a {CRLF} after each column (‘L’) or all on one line (‘W)</li>
<li>A ColumnName prefix (for doing table aliases)</li>
<li>A table schema (if you have other table schema’s besides ‘dbo’)</li>
</ul>
<p>Here’s the code (make sure to look at the bottom):<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">USE</span> [<span class="keyword">master</span>]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> [dbo].[sp_listcolumns]</span><br><span class="line">    @<span class="keyword">table</span>  SYSNAME,</span><br><span class="line">    @list   <span class="built_in">CHAR</span>(<span class="number">1</span>) = <span class="string">'L'</span>,</span><br><span class="line">    @prefix SYSNAME = <span class="string">''</span>,</span><br><span class="line">    @<span class="keyword">schema</span> SYSNAME = <span class="string">'dbo'</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span></span><br><span class="line"><span class="operator"><span class="keyword">SET</span> QUOTED_IDENTIFIER OFF</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> @columnlist <span class="keyword">NVARCHAR</span>(<span class="number">4000</span>)</span><br><span class="line">       ,@colctr <span class="built_in">INT</span> = <span class="number">1</span></span><br><span class="line">       ,@sqlcmd <span class="keyword">NVARCHAR</span>(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #<span class="keyword">column</span></span><br><span class="line">(</span><br><span class="line">    ColumnName <span class="keyword">NVARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    Ordinal <span class="built_in">INT</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> CLUSTERED <span class="keyword">INDEX</span> IC_ColumnList99 <span class="keyword">ON</span> #<span class="keyword">column</span> (Ordinal)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> @columnlist =    <span class="string">''</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">table</span> =        <span class="keyword">LTRIM</span>(<span class="keyword">RTRIM</span>(@<span class="keyword">table</span>))</span><br><span class="line"><span class="keyword">SET</span> @list =         <span class="keyword">LTRIM</span>(<span class="keyword">RTRIM</span>(@list))</span><br><span class="line"><span class="keyword">SET</span> @prefix =       <span class="keyword">LTRIM</span>(<span class="keyword">RTRIM</span>(@prefix))</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">schema</span> =       <span class="keyword">LTRIM</span>(<span class="keyword">RTRIM</span>(@<span class="keyword">schema</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> #<span class="keyword">column</span> (ColumnName, Ordinal)</span><br><span class="line"><span class="keyword">SELECT</span>  <span class="string">'['</span>+<span class="keyword">LTRIM</span>(<span class="keyword">RTRIM</span>(COLUMN_NAME))+<span class="string">']'</span>, ORDINAL_POSITION</span><br><span class="line"><span class="keyword">FROM</span>    INFORMATION_SCHEMA.<span class="keyword">COLUMNS</span></span><br><span class="line"><span class="keyword">WHERE</span>   TABLE_NAME = @<span class="keyword">table</span> <span class="keyword">AND</span></span><br><span class="line">        TABLE_SCHEMA = @<span class="keyword">schema</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ORDINAL_POSITION</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Check to make sure we actually got usuable input from the User</span></span><br><span class="line"><span class="keyword">IF</span> ((<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> #<span class="keyword">column</span>) = <span class="number">0</span>)</span><br><span class="line">RAISERROR(<span class="string">'Bad Table Information - Please Try Again'</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">IF</span>(@prefix &lt;&gt; <span class="string">''</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">UPDATE</span> #<span class="keyword">column</span></span><br><span class="line">    <span class="keyword">SET</span>    ColumnName = @prefix + ColumnName</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">IF</span>(@list = <span class="string">'L'</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="comment">-- If it is 'L' just append a ',' to each line, output would be:</span></span><br><span class="line">        <span class="comment">-- TestCol1,</span></span><br><span class="line">        <span class="comment">-- TestCol2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">UPDATE</span>  C</span><br><span class="line">        <span class="keyword">SET</span>     @columnlist = @columnlist + C.ColumnName + <span class="string">','</span> + <span class="built_in">CHAR</span>(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">FROM</span>    #<span class="keyword">column</span> C</span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="comment">-- else we output a 'w' where it just a ',' separated list of Column names</span></span><br><span class="line">        <span class="keyword">UPDATE</span>  C</span><br><span class="line">        <span class="keyword">SET</span>     @columnlist = @columnlist + C.ColumnName + <span class="string">','</span></span><br><span class="line">        <span class="keyword">FROM</span>    #<span class="keyword">column</span> C</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- Remove the last comma</span></span><br><span class="line">        <span class="keyword">SET</span> @columnlist = <span class="keyword">LEFT</span>(@columnlist,<span class="keyword">LEN</span>(@columnlist) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Output the results so that they can be nicely copy</span></span><br><span class="line"><span class="comment">-- and pasted from the comment window</span></span><br><span class="line">PRINT(@columnlist)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT OFF</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span></span></span><br></pre></td></tr></table></figure></p>
<p>Lastly we need to add this as a system proc, or else it never changes its scope to the DB you are running it in</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">EXECUTE</span> sp_MS_marksystemobject <span class="string">'sp_listcolumns'</span></span></span><br></pre></td></tr></table></figure>
<p>After we have this proc build and added, we can get output like this:<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dbo.Test</span><br><span class="line">(</span><br><span class="line">    Id UNIQUEIDENTIFIER</span><br><span class="line">    ,TestCol1 <span class="keyword">NVARCHAR</span>(<span class="number">64</span>)</span><br><span class="line">    ,TestCol2 <span class="built_in">INT</span></span><br><span class="line">    ,TestCol3 <span class="built_in">BIT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line">sp_listcolumns <span class="string">'test'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--Outputs:</span></span><br><span class="line">[Id],</span><br><span class="line">[TestCol1],</span><br><span class="line">[TestCol2],</span><br><span class="line">[TestCol3],</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line">sp_listcolumns <span class="string">'test'</span>,<span class="string">'w'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--Outputs:</span></span><br><span class="line">[Id],[TestCol1],[TestCol2],[TestCol3]</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line">sp_listcolumns <span class="string">'test'</span>,<span class="string">'l'</span>,<span class="string">'testTable.'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--Outputs:</span></span><br><span class="line">testTable.[Id],</span><br><span class="line">testTable.[TestCol1],</span><br><span class="line">testTable.[TestCol2],</span><br><span class="line">testTable.[TestCol3],</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line">sp_listcolumns <span class="string">'test'</span>,<span class="string">'w'</span>,<span class="string">'testTable.'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--Outputs:</span></span><br><span class="line">testTable.[Id],testTable.[TestCol1],testTable.[TestCol2],testTable.[TestCol3]</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>When I’m doing heavy database development, one of the biggest annoyances I run into is having to hand key (or clumsily generate) the colu]]>
    </summary>
    
      <category term="SQL" scheme="http://ericmbarnard.com/tags/sql/"/>
    
      <category term="Development" scheme="http://ericmbarnard.com/categories/development/"/>
    
  </entry>
  
</feed>